
var playerTurn = 0;// 0 = x turn, 1 = O turn
var NUM_COLS = 7;
var NUM_ROWS = 6;
var currentScene=0;
var bitmojiX=217;
var bitmojiY=200;
var playGame;
var SYMBOLS = ["0",'O'];
var board=[
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0]
    ];
var tiles = [];

/* Copy in your drawBitmoji function */
var drawBitmojiHead=function(x,y,h)
{
    noStroke();
    fill(161, 92, 51);// skin tone
    ellipse(x+(h/100*100),y+(h/100*100),h/100*82,h/100*104);//head
    fill(189, 182, 189);
    arc(x+(h/100*60),y+(h/100*141),h/100*30,h/100*65,0,361);//left chisel*******
    arc(x+(h/100*141),y+(h/100*141),h/100*30,h/100*65,0,361);//right chisel
    fill(5, 4, 4);
    quad(x+(h/100*59),y+(h/100*100),x+(h/100*60),y+(h/100*71),x+(h/100*81),y+(h/100*51),x+(h    /100*69),y+(h/100*98));//left hair
    quad(x+(h/100*142),y+(h/100*99),x+(h/100*137),y+(h/100*69),x+(h/100*120),y+(h/100*52),x+(h    /100*133),y+(h/100*98));//right hair
    fill(217, 205, 100);
    arc(x+(h/100*99),y+(h/100*82),h/100*82,h/100*70,182,360);//hat
    fill(37, 107, 32);
    rect(x+(h/100*93),y+(h/100*73),h/100*10,h/100*5,h/100*1);
    fill(255, 255, 255);
    ellipse(x+(h/100*89),y+(h/100*100),h/100*14,h/100*-7);//left eye
    ellipse(x+(h/100*113),y+(h/100*100),h/100*14,h/100*-7);//right eye
    fill(0, 0, 0);
    ellipse(x+(h/100*89),y+(h/100*100),h/100*6,h/100*4);//left eyelid
    ellipse(x+(h/100*113),y+(h/100*100),h/100*6,h/100*4);//left eyelid
    stroke(0, 0, 0);
    fill(161, 92, 51);
    bezier(x+(h/100*100),y+(h/100*102),x+(h/100*121),y+(h/100*122),x+(h/100*92),y+(h/100*120    ),x+(h/100*96),y+(h/100*115));//nose
    noStroke();
    fill(240, 120, 148);
    arc(x+(h/100*100),y+(h/100*130),h/100*17,h/100*24,2,176);//mouth
};
var drawBitmojiBody=function(x,y,h)
{
    fill(0, 0, 0);
    quad(x+(h/100*112),y+(h/100*153),x+(h/100*36),y+(h/100*145),x+(h/100*28),y+(h/100*213),x    +(h/100*81),y+(h/100*209));//shirt
    quad(x+(h/100*181),y+(h/100*211),x+(h/100*168),y+(h/100*145),x+(h/100*67),y+(h/100*155),x    +(h/100*50),y+(h/100*209));//shirt
    textSize(h/100*30);
    fill(255, 255, 255);
    text("OD",x+(h/100*82),y+(h/100*167));//text on shirt
};
var drawBitmoji=function(x,y,h)
{
    drawBitmojiHead(x,y,h);
    drawBitmojiBody(x,y,h);
};

/* Copy in the Khan Button class */
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(0, 234, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

var startButton = new Button({
    x: 122,
    y: 253,
    label: "start!",
    onClick: function() {
        currentScene=1;
        playGame();
    }
});

 /*Define mouseClicked built-in function
        -   have it check to see if the mouse was clicked on the grid 
        -  if the mouse was clicked on the grid make the discs appear
    */
mouseClicked = function() {
    if(currentScene===0){
        startButton.handleMouseClick();
    }
    if(currentScene === 1){
    for(var i in tiles){
        if (tiles[i].isUnderMouse(mouseX,mouseY)){
            if (playerTurn === 0){
            tiles[i].color = color(231, 242, 29);
            playerTurn=1;
            }
            else if(playerTurn === 1){
            tiles[i].color = color(237, 5, 59);
            playerTurn=0;
            }
            }
        }
    }
    };

    

// splash screen function with informations about the game and the bitmojis
var splashScreen=function(){
    background(189, 182, 189);
    drawBitmoji(118,21,70);
    fill(0, 0, 0);
    textSize(27);
    text("Connect 4 game",92,213);
    text("Connect 4 discs",95,320);
     text("and win the game",86,355);
    startButton.draw();
};

//function to check if the piece is on the grid
var checkPiece = function(r,c){
    if(r>=0 && r<6 && c>=0 && c<7){
        return board[r][c];
    }
    else{
        return null;
    }
};
//function to check if there are 4 discs in a row
var checkWin = function(player) { 
    //horizontal
   for (var r = 0; r < 6; r++) {
    for (var c = 0; c < 7; c++) {
      if (
        checkPiece(r, c) === playerTurn &&
        checkPiece(r, c + 1) === playerTurn &&
        checkPiece(r, c + 2) === playerTurn &&
        checkPiece(r, c + 3) === playerTurn
      ) {
        return true;
      }
    }
  }
  //vertical
   for (var r = 0; r < 6; r++) {
    for (var c = 0; c < 7; c++) {
      if (
        checkPiece(r, c) === playerTurn &&
        checkPiece(r + 1, c) === playerTurn &&
        checkPiece(r + 2, c) === playerTurn &&
        checkPiece(r + 3, c) === playerTurn
      ) {
        return true;
      }
    }
  }
  //diagonal(down-right)
  for (var r=0 ; r< 6 ; r++) {
    for (var c=0 ; c< 7 ; c++) {
      if (
        checkPiece(r,c) === playerTurn &&
        checkPiece(r+1, c+1) === playerTurn &&
        checkPiece(r+2, c+2) === playerTurn &&
        checkPiece(r+3, c+3) === playerTurn
      ) {
        return true;
      }
    }
  }
  //diagonal(up-right)
  /*for (var r=3; r<6; r++) {
    for (var c=0; c<4; c++) {
      if (
        checkPiece(r,c) === player &&
        checkPiece(r-1, c+1) === player &&
        checkPiece(r-2, c+2) === player &&
        checkPiece(r-3, c+3) === player
      ) {
        return true;
      }
    }
}*/
  
 //function to make the discs drop down
var dropPiece=function(c,player){
    var r=5;
    //find empty cell
    while (board[r][c]!==0 && r>=0) {
    r--;
  }
  //if there is an empty cell put the Tile in it
  if (r>=0) {
    board[r][c] = playerTurn;
    return true;
  } 
  else{
    return false;
  }
};



};

var Tile = function(x, y) {
    this.x = x+36;
    this.y = y+5;
    this.size = width/NUM_COLS-11;
    this.label = "";
    this.isFaceUp = false;
    this.color=color(255, 255, 255);
};

Tile.prototype.empty = function() {
    return this.label === "";
};

Tile.prototype.onClick = function() {
    if (!this.empty()) {
       return ;
    }
    
    this.label = SYMBOLS[playerTurn];
    
    playerTurn++;
    if ( playerTurn >= SYMBOLS.length) {
         playerTurn= 0;
    }
    /*check what player turn and change the color*/
};

Tile.prototype.handleMouseClick = function(x, y) {
   if ( x >= this.x && x <= this.x + this.size && y >= this.y && y <= this.y  + this.size )
    {
        this.onClick();
    }
};

Tile.prototype.isUnderMouse = function(x, y) {
    return x >= (this.x) - 10 && x <= this.x + this.size  &&
        y >= (this.y) - 25 && y <= this.y + this.size;
};



Tile.prototype.draw = function() {
    fill(this.color);
    strokeWeight(0);
    if(this.isUnderMouse(mouseX,mouseY) && playerTurn === 0){
        fill(231, 242, 29);
    } else if(this.isUnderMouse(mouseX,mouseY) && playerTurn === 1){
        fill(237, 5, 59);
    }
    ellipse(this.x, this.y, this.size, this.size);
};

var drawTiles = function() {
    for (var i in tiles) {
        tiles[i].draw();
    }
};

//gameScreen function that shows the grid 
var gameScreen= function() {
for (var i = 0; i < NUM_COLS; i++) {
    for (var j = 0; j < NUM_ROWS; j++) {
        tiles.push(new Tile(i * (width/NUM_COLS-2), j * (height/NUM_ROWS+7)));
    }
}

background(31, 70, 242);
drawTiles();
    if (checkWin()) 
    {
        fill(63, 50, 135);
        text ("winner" , 200,200);
        
    }
};  


draw = function() {
    if(currentScene===0){splashScreen();}
    else if(currentScene===1){gameScreen();}
};
